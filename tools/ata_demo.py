#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de Gera√ß√£o Autom√°tica de Atas - UFS
Demonstra√ß√£o Interativa para Conselho Universit√°rio

Este script implementa uma interface visual usando Gradio para demonstrar
o sistema de gera√ß√£o autom√°tica de atas de reuni√£o desenvolvido para
a Universidade Federal de Sergipe (UFS).

Autor: [Seu Nome]
Data: Agosto 2025
"""

import gradio as gr
import whisper
import os
from openai import OpenAI
from pyannote.audio import Pipeline
import torch
from datetime import datetime
import json
import tempfile
from collections import defaultdict
import warnings
import argparse
import sys

warnings.filterwarnings('ignore')

class AtaSystemUFS:
    """Sistema de gera√ß√£o de atas da UFS"""
    
    def __init__(self, openai_api_key=None):
        self.openai_api_key = openai_api_key or os.getenv("OPENAI_API_KEY")
        self.whisper_model = None
        self.diarization_pipeline = None
        self.client = None
        self.diarization_available = False
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        
    def setup_models(self):
        """Configura todos os modelos necess√°rios"""
        print("üîÑ Iniciando configura√ß√£o dos modelos...")
        
        # OpenAI Client
        if self.openai_api_key:
            self.client = OpenAI(api_key=self.openai_api_key)
            print("‚úÖ Cliente OpenAI configurado!")
        else:
            print("‚ùå ERRO: Chave da OpenAI API n√£o configurada")
            print("   Configure a vari√°vel de ambiente OPENAI_API_KEY")
            return False
        
        # Whisper
        try:
            print("üîÑ Carregando modelo Whisper...")
            self.whisper_model = whisper.load_model("small")
            print("‚úÖ Whisper carregado!")
        except Exception as e:
            print(f"‚ùå Erro ao carregar Whisper: {e}")
            return False
        
        # Diariza√ß√£o (opcional)
        try:
            print("üîÑ Configurando pipeline de diariza√ß√£o...")
            print(f"   Dispositivo: {self.device}")
            self.diarization_pipeline = Pipeline.from_pretrained("pyannote/speaker-diarization@2.1")
            self.diarization_pipeline.to(self.device)
            self.diarization_available = True
            print("‚úÖ Pipeline de diariza√ß√£o configurado!")
        except Exception as e:
            print(f"‚ö†Ô∏è Diariza√ß√£o n√£o dispon√≠vel: {e}")
            print("   Sistema funcionar√° sem separa√ß√£o de speakers")
            self.diarization_available = False
        
        print("‚úÖ Configura√ß√£o conclu√≠da!")
        return True
    
    def perform_diarization(self, audio_path):
        """Realiza diariza√ß√£o do √°udio"""
        if not self.diarization_available:
            return []
        
        try:
            diarization = self.diarization_pipeline(audio_path)
            speakers_info = []
            
            for turn, _, speaker in diarization.itertracks(yield_label=True):
                speakers_info.append({
                    "speaker": speaker,
                    "start": turn.start,
                    "end": turn.end,
                    "duration": turn.end - turn.start
                })
            
            return speakers_info
        except Exception as e:
            print(f"Erro na diariza√ß√£o: {e}")
            return []
    
    def transcribe_with_diarization(self, audio_path, speakers_info):
        """Transcreve √°udio com informa√ß√µes de diariza√ß√£o"""
        try:
            result = self.whisper_model.transcribe(audio_path, language="pt")
            full_transcription = result["text"]
            segments = result.get("segments", [])
            
            if not speakers_info or not segments:
                return [], full_transcription
            
            speaker_transcriptions = []
            
            for segment in segments:
                segment_center = (segment["start"] + segment["end"]) / 2
                assigned_speaker = "PARTICIPANTE"
                
                for speaker_info in speakers_info:
                    if speaker_info["start"] <= segment_center <= speaker_info["end"]:
                        assigned_speaker = speaker_info["speaker"]
                        break
                
                speaker_transcriptions.append({
                    "speaker": assigned_speaker,
                    "start": segment["start"],
                    "end": segment["end"],
                    "text": segment["text"].strip(),
                    "duration": segment["end"] - segment["start"]
                })
            
            return speaker_transcriptions, full_transcription
        
        except Exception as e:
            print(f"Erro na transcri√ß√£o: {e}")
            return [], ""
    
    def generate_speaker_stats(self, speaker_transcriptions):
        """Gera estat√≠sticas dos participantes"""
        speaker_stats = defaultdict(lambda: {"total_time": 0, "segments": 0, "words": 0})
        
        for segment in speaker_transcriptions:
            speaker = segment["speaker"]
            speaker_stats[speaker]["total_time"] += segment["duration"]
            speaker_stats[speaker]["segments"] += 1
            speaker_stats[speaker]["words"] += len(segment["text"].split())
        
        return dict(speaker_stats)
    
    def generate_meeting_minutes(self, transcription, speaker_stats=None):
        """Gera ata de reuni√£o usando OpenAI"""
        try:
            speaker_context = ""
            if speaker_stats:
                speaker_context = "\n\n=== PARTICIPANTES IDENTIFICADOS ===\n"
                for speaker, stats in speaker_stats.items():
                    speaker_context += f"- {speaker}: {stats['total_time']:.1f}s de fala, {stats['segments']} interven√ß√µes\n"
            
            system_prompt = """Voc√™ √© um assistente especializado em gerar atas de reuni√£o para o contexto universit√°rio brasileiro.
            
            Sua tarefa √© analisar a transcri√ß√£o de uma reuni√£o e criar uma ata formal e estruturada seguindo os padr√µes acad√™micos.
            
            A ata deve conter:
            1. CABE√áALHO - Data, participantes, tipo de reuni√£o
            2. PAUTA - Principais t√≥picos discutidos
            3. DELIBERA√á√ïES - Decis√µes tomadas e vota√ß√µes
            4. ENCAMINHAMENTOS - A√ß√µes futuras e respons√°veis
            5. OBSERVA√á√ïES - Informa√ß√µes adicionais relevantes
            
            Use linguagem formal, objetiva e organize as informa√ß√µes de forma clara e hier√°rquica.
            Identifique decis√µes importantes, pontos de consenso e discord√¢ncia quando aplic√°vel."""
            
            user_prompt = f"""TRANSCRI√á√ÉO DA REUNI√ÉO:
            {transcription}
            {speaker_context}
            
            Por favor, gere uma ata completa, formal e bem estruturada baseada nesta transcri√ß√£o.
            Organize as informa√ß√µes de forma profissional adequada para o ambiente universit√°rio."""
            
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.2,
                max_tokens=3000
            )
            
            return response.choices[0].message.content
        
        except Exception as e:
            return f"Erro na gera√ß√£o da ata: {str(e)}"
    
    def process_audio_file(self, audio_file, progress=gr.Progress()):
        """Fun√ß√£o principal que processa o arquivo de √°udio"""
        if audio_file is None:
            return "‚ùå Nenhum arquivo de √°udio foi enviado.", "", "", ""
        
        try:
            progress(0, desc="üéµ Carregando arquivo de √°udio...")
            
            # Etapa 1: Diariza√ß√£o
            progress(0.1, desc="üé≠ Identificando participantes (diariza√ß√£o)...")
            speakers_info = self.perform_diarization(audio_file)
            
            num_speakers = len(set([s['speaker'] for s in speakers_info])) if speakers_info else 1
            
            # Etapa 2: Transcri√ß√£o
            progress(0.4, desc="üé§ Transcrevendo √°udio...")
            speaker_transcriptions, full_transcription = self.transcribe_with_diarization(audio_file, speakers_info)
            
            if not full_transcription:
                return "‚ùå Erro na transcri√ß√£o do √°udio.", "", "", ""
            
            # Etapa 3: Estat√≠sticas
            progress(0.6, desc="üìä Calculando estat√≠sticas...")
            speaker_stats = self.generate_speaker_stats(speaker_transcriptions)
            
            # Etapa 4: Gera√ß√£o da ata
            progress(0.8, desc="üìù Gerando ata de reuni√£o...")
            meeting_minutes = self.generate_meeting_minutes(full_transcription, speaker_stats)
            
            progress(1.0, desc="‚úÖ Processamento conclu√≠do!")
            
            # Formata√ß√£o dos resultados
            stats_text = f"""## üìä Estat√≠sticas da Reuni√£o

**Participantes identificados:** {num_speakers}
**Dura√ß√£o da transcri√ß√£o:** {len(full_transcription)} caracteres
**Processado em:** {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}

### Participa√ß√£o por Speaker:
"""
            
            if speaker_stats:
                for speaker, stats in sorted(speaker_stats.items()):
                    stats_text += f"\n- **{speaker}**: {stats['total_time']:.1f}s ({stats['segments']} interven√ß√µes, {stats['words']} palavras)"
            else:
                stats_text += "\n- N√£o foi poss√≠vel separar por participantes"
            
            # Transcri√ß√£o formatada
            transcription_display = f"""## üé§ Transcri√ß√£o Completa

{full_transcription[:2000]}{'...' if len(full_transcription) > 2000 else ''}
"""
            
            # Ata formatada
            ata_display = f"""## üìã Ata de Reuni√£o Gerada

{meeting_minutes}
"""
            
            success_msg = f"""‚úÖ **Processamento conclu√≠do com sucesso!**

üéØ **Arquivo processado:** {os.path.basename(audio_file)}
üïí **Hor√°rio:** {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}
üë• **Participantes:** {num_speakers} identificados
üìÑ **Transcri√ß√£o:** {len(full_transcription)} caracteres
"""
            
            return success_msg, stats_text, transcription_display, ata_display
        
        except Exception as e:
            error_msg = f"‚ùå **Erro no processamento:** {str(e)}"
            return error_msg, "", "", ""
    
    def create_interface(self):
        """Cria a interface Gradio"""
        
        css = """
        .gradio-container {
            max-width: 1200px !important;
        }
        .header {
            text-align: center;
            background: linear-gradient(90deg, #1f4e79, #2e7d32);
            color: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        """
        
        with gr.Blocks(css=css, title="Sistema de Atas UFS") as interface:
            
            # Cabe√ßalho
            gr.HTML("""
            <div class="header">
                <h1>üéØ Sistema de Gera√ß√£o Autom√°tica de Atas</h1>
                <h2>Universidade Federal de Sergipe - UFS</h2>
                <p><strong>Demonstra√ß√£o para Conselho Universit√°rio</strong></p>
            </div>
            """)
            
            gr.Markdown("""
            ### üìã Como usar:
            1. **Fa√ßa upload** de um arquivo de √°udio (.mp3, .wav, .m4a)
            2. **Clique em "Processar √Åudio"** e aguarde
            3. **Visualize os resultados** nas abas abaixo
            
            > ‚ö° O processamento pode levar alguns minutos dependendo do tamanho do arquivo
            """)
            
            # Input de √°udio
            with gr.Row():
                audio_input = gr.Audio(
                    label="üìÅ Upload do Arquivo de √Åudio",
                    type="filepath",
                    format="wav"
                )
            
            # Bot√£o de processamento
            process_btn = gr.Button(
                "üöÄ Processar √Åudio",
                variant="primary",
                size="lg"
            )
            
            # Outputs organizados em abas
            with gr.Tabs():
                
                with gr.TabItem("üìä Status & Estat√≠sticas"):
                    status_output = gr.Markdown(label="Status")
                    stats_output = gr.Markdown(label="Estat√≠sticas")
                
                with gr.TabItem("üé§ Transcri√ß√£o"):
                    transcription_output = gr.Markdown(label="Transcri√ß√£o Completa")
                
                with gr.TabItem("üìã Ata Gerada"):
                    ata_output = gr.Markdown(label="Ata de Reuni√£o")
            
            # Conectar o bot√£o com a fun√ß√£o
            process_btn.click(
                fn=self.process_audio_file,
                inputs=[audio_input],
                outputs=[status_output, stats_output, transcription_output, ata_output],
                show_progress=True
            )
            
            # Rodap√©
            gr.HTML("""
            <div style="text-align: center; margin-top: 30px; padding: 20px; background-color: #f5f5f5; border-radius: 10px;">
                <p><strong>üéì Sistema desenvolvido para a UFS</strong></p>
                <p>Tecnologias: Whisper AI + PyAnnote + OpenAI GPT + Gradio</p>
                <p><em>Demonstra√ß√£o t√©cnica - TCC Engenharia de Computa√ß√£o</em></p>
            </div>
            """)
        
        return interface
    
    def run(self, share=True, server_port=7860):
        """Executa a aplica√ß√£o"""
        if not self.setup_models():
            print("‚ùå Falha na configura√ß√£o. Encerrando.")
            return
        
        print("üéØ Iniciando Sistema de Gera√ß√£o de Atas - UFS")
        print("üì± A interface ser√° aberta em uma nova aba/janela")
        print("üîó Ou acesse o link que ser√° exibido abaixo")
        print("\n" + "="*50)
        
        interface = self.create_interface()
        interface.launch(
            server_name="0.0.0.0",
            server_port=server_port,
            share=share,
            debug=False,
            show_error=True
        )


def main():
    """Fun√ß√£o principal"""
    parser = argparse.ArgumentParser(description="Sistema de Gera√ß√£o Autom√°tica de Atas - UFS")
    parser.add_argument("--api-key", help="Chave da API OpenAI")
    parser.add_argument("--port", type=int, default=7860, help="Porta do servidor (padr√£o: 7860)")
    parser.add_argument("--no-share", action="store_true", help="N√£o criar link p√∫blico")
    
    args = parser.parse_args()
    
    # Verificar chave da API
    api_key = args.api_key or os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå ERRO: Chave da OpenAI API n√£o fornecida")
        print("\nOP√á√ïES:")
        print("1. Use: python ata_demo.py --api-key SUA_CHAVE_AQUI")
        print("2. Ou defina: export OPENAI_API_KEY=SUA_CHAVE_AQUI")
        print("3. Ou configure a vari√°vel de ambiente OPENAI_API_KEY")
        sys.exit(1)
    
    # Criar e executar o sistema
    sistema = AtaSystemUFS(openai_api_key=api_key)
    sistema.run(share=not args.no_share, server_port=args.port)


if __name__ == "__main__":
    main()
