#!/usr/bin/env python3
"""
Script de execu√ß√£o do YouTube Scraper para reuni√µes CONSU e CONEPE
================================================================

Script simples para executar o scraper das reuni√µes dos conselhos da UFS.

Uso:
    python run_scraper.py                    # Download completo
    python run_scraper.py --limit 10         # Buscar apenas 10 v√≠deos mais recentes
    python run_scraper.py --stats            # Mostrar apenas estat√≠sticas
    python run_scraper.py --download-limit 5 # Baixar no m√°ximo 5 v√≠deos

Autor: Charlie Rodrigues Fonseca
Data: 24/07/2025
"""

import sys
import argparse
from pathlib import Path

# Adicionar o diret√≥rio src ao path para imports
sys.path.append(str(Path(__file__).parent))

from services.youtube_scraper import YouTubeScraper


def main():
    """Fun√ß√£o principal."""
    parser = argparse.ArgumentParser(
        description="Baixar √°udios das reuni√µes CONSU e CONEPE do canal TV UFS",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  python run_scraper.py                    # Download completo
  python run_scraper.py --limit 20         # Buscar apenas 20 v√≠deos mais recentes  
  python run_scraper.py --stats            # Mostrar apenas estat√≠sticas
  python run_scraper.py --download-limit 3 # Baixar no m√°ximo 3 v√≠deos por execu√ß√£o
  python run_scraper.py --test             # Modo teste (buscar mas n√£o baixar)
        """
    )
    
    parser.add_argument(
        '--limit', 
        type=int, 
        default=100, 
        help='N√∫mero m√°ximo de v√≠deos para buscar no canal (padr√£o: 100)'
    )
    
    parser.add_argument(
        '--download-limit', 
        type=int, 
        help='N√∫mero m√°ximo de downloads por execu√ß√£o (√∫til para testes)'
    )
    
    parser.add_argument(
        '--stats', 
        action='store_true',
        help='Mostrar apenas estat√≠sticas dos downloads existentes'
    )
    
    parser.add_argument(
        '--test', 
        action='store_true',
        help='Modo teste: buscar v√≠deos mas n√£o fazer downloads'
    )
    
    parser.add_argument(
        '--verbose', 
        action='store_true',
        help='Mostrar logs detalhados'
    )
    
    parser.add_argument(
        '--analyze', 
        action='store_true',
        help='Analisar todos os v√≠deos da Sala dos Conselhos (sem baixar)'
    )
    
    args = parser.parse_args()
    
    # O diret√≥rio base ser√° detectado automaticamente pelo YouTubeScraper
    # N√£o precisamos mais especificar manualmente
    
    try:
        # Inicializar scraper (detecta automaticamente o diret√≥rio raiz)
        print("üé• YouTube Scraper - Reuni√µes CONSU e CONEPE")
        print("=" * 50)
        
        scraper = YouTubeScraper()  # Detecta automaticamente o diret√≥rio raiz
        
        if args.analyze:
            # An√°lise completa dos v√≠deos
            videos = scraper.get_all_sala_conselhos_videos(100)
            
            padrao_ok = [v for v in videos if v.get('status') == 'padrao_ok']
            padrao_diferente = [v for v in videos if v.get('status') == 'padrao_diferente']
            
            print(f"\nüìä AN√ÅLISE COMPLETA - 'Sala dos Conselhos'")
            print(f"{'='*50}")
            print(f"‚úÖ Padr√£o correto: {len(padrao_ok)}")
            print(f"‚ùì Padr√£o diferente: {len(padrao_diferente)}")
            
            if padrao_diferente:
                print(f"\n‚ùì T√çTULOS COM PADR√ÉO DIFERENTE:")
                for video in padrao_diferente:
                    print(f"  - {video['title']}")
            
        if args.stats:
            # Mostrar estat√≠sticas
            stats = scraper.get_download_statistics()
            print("\nüìä ESTAT√çSTICAS DOS DOWNLOADS")
            print("-" * 30)
            print(f"Total de reuni√µes: {stats['total']}")
            print(f"Reuni√µes CONSU: {stats['consu']}")
            print(f"Reuni√µes CONEPE: {stats['conepe']}")
            print(f"Tamanho total: {stats['total_size_mb']} MB")
            if stats['last_update']:
                print(f"√öltima atualiza√ß√£o: {stats['last_update']}")
            else:
                print("Nenhum download realizado ainda")
                
        elif args.test:
            # Modo teste - apenas buscar v√≠deos
            print(f"\nüîç MODO TESTE - Buscando v√≠deos (limite: {args.limit})")
            print("-" * 50)
            
            videos = scraper.get_channel_videos(args.limit)
            
            if videos:
                print(f"\n‚úÖ Encontradas {len(videos)} reuni√µes:")
                for i, video in enumerate(videos, 1):
                    print(f"{i:2d}. [{video['conselho'].upper()}] {video['data']} - #{video['numero']}")
                    print(f"     {video['title']}")
                    print(f"     ID: {video['video_id']}")
                    print()
            else:
                print("‚ùå Nenhuma reuni√£o encontrada")
                
        else:
            # Executar scraping completo
            print(f"\n‚¨áÔ∏è  INICIANDO DOWNLOADS")
            print(f"Limite de busca: {args.limit}")
            if args.download_limit:
                print(f"Limite de downloads: {args.download_limit}")
            print("-" * 50)
            
            results = scraper.run_scraper(
                limit=args.limit,
                download_limit=args.download_limit
            )
            
            print("\nüìä RESULTADOS")
            print("-" * 20)
            print(f"V√≠deos encontrados: {results['videos_found']}")
            print(f"Downloads tentados: {results['downloads_attempted']}")
            print(f"Downloads bem-sucedidos: {results['downloads_successful']}")
            print(f"Total acumulado: {results['total_downloaded']}")
            
            if results['downloads_successful'] > 0:
                print(f"\n‚úÖ {results['downloads_successful']} √°udios baixados com sucesso!")
                print(f"üìÅ Arquivos salvos em: {scraper.audio_dir}")
            elif results['downloads_attempted'] == 0:
                print("\nüí° Todos os v√≠deos j√° foram baixados anteriormente")
            else:
                print("\n‚ùå Houveram falhas nos downloads. Verifique os logs.")
                
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Opera√ß√£o cancelada pelo usu√°rio")
        sys.exit(1)
        
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
